int actionRewardTable[3];


void movingForward()
{
    if(digital(15) || digital(14))
    {
        motor(0,0);
        motor(2,0);
        actionRewardTable[0] -= 99;
    }   
    else
    {
        motor(0, 50);
        motor(2, 50); 
        actionRewardTable[0] += 1;
    }    
}    

void turn90Left()
{
    float startTime = seconds();    
    while(seconds() < (startTime + 1.0))
      {
        motor(0, -100);
        motor(2, 0); 
    }    
    actionRewardTable[1] -= 100;
}   

void turnRight()
{
    float startTime = seconds();    
    while(seconds() < (startTime + 1.0))
      {
        motor(0, 0);
        motor(2, -100); 
    }    
    actionRewardTable[2] -= 320;
} 

int findHighestQ()
{
    int largest = actionRewardTable[0];
    int currentPosition=0;
    int i; 
    for(i = 1; i<3; i++)
    {
        if(actionRewardTable[i] > largest)
        {
            currentPosition = i;
        }    
    } /*
    if(actionRewardTable[0] >= actionRewardTable[1])
      {
        return 0;
    } else
      {
        return 1;
    }*/
    
    return currentPosition;
}    

int main()
{
    actionRewardTable[0] = 0; // Move forward action
    actionRewardTable[1] = 0; // turn 90 left action
    actionRewardTable[2] = 0;
    
    while(1)
    {
        int state = findHighestQ();
        if(state == 1)
        {
            turn90Left();
        }else if(state==2)
        {
            turnRight();
        } else
        {
            movingForward();
        }
        
    }        
}    
