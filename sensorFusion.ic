/****************************************************
 * Title: Maze Navigation Sensor Fusion             *
 * Author: Derek Belsky and Emmitt Frankenberry     *
 * Purpose: To solve a maze using sensor fusion     *
 *           between a reflective-opto senseor and  *
 *           a photo-sensor                         *
 ****************************************************/

/* State information to tell what event we are currently in
   state 0 moving forward
   state 1 moving backward
   state 2 turning left
*/
#define RO 200
#define LS 200

//Global variables
int state = 0;
float timer = 0.0;
int lock = 0; // 0 open 1 closed


/***********************************
 * Title: movingForward            *
 * Returns: NA                     *
 * Parameters: NA                  *
 * Purpose: To move the robot for- *
 *    ward and change state when   *
 *    needed.                      *
 ***********************************/
void movingForward()
{
    if(analog(3) < RO && analog(2) > LS)
      {
        sleep(.25);
        if(analog(2) > LS)
          {  
            state = 1;
        }    
    } 
    /*else if (analog(3) < RO && analog(2) < LS)
    {
        state = 3;
    }
*/  else
      {
        motor(0, 42);
        motor(2, 54);
    }
}

/***********************************
 * Title: movingBackward           *
 * Returns: NA                     *
 * Parameters: NA                  *
 * Purpose: To move the robot back *
 *    for 1.5 seconds then move to *
 *    to the turningLeft state.    *
 ***********************************/
void movingBackward()
{
    
    if(lock == 0)
      {
        timer = seconds(); 
        lock = 1;
    }
    if(lock == 1 && (seconds() - timer) > 1.5)
      {
        state = 2; 
    }  
    else 
      {
        motor(0, -50);
        motor(2, -50);
    }    
    
} 

/***********************************
 * Title: turningLeft              *
 * Returns: NA                     *
 * Parameters: NA                  *
 * Purpose: To turn the robot 90   *
 *    degrees to the left and then *
 *    return to movingForward.     *
 ***********************************/
void turningLeft()
{
    if((seconds() - timer) > 5.55)
      {
        state = 0;
        lock = 0;
    } 
    else 
      {
        motor(0, 50);
        motor(2, 0); 
    }    
    
}

/***********************************
 * Title: main                     *
 * Returns: NA                     *
 * Parameters: NA                  *
 * Purpose: To go into the current *
 *    state method and continue to *
 *    run the code.                *
 ***********************************/
int main()
{
    while(1)
      {
        if(state == 0)
          {
            movingForward();
        }
        else if (state == 1)
          {
            movingBackward();
        } 
        else if (state == 2)
          {
            turningLeft();
        }   
    }    
}    
